//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace Turakas.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceGame", Namespace="http://schemas.datacontract.org/2004/07/TurakasServiceLibrary")]
    public partial class ServiceGame : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountField;
        
        private int IDField;
        
        private System.Collections.ObjectModel.ObservableCollection<Turakas.ServiceReference1.ServicePlayer> PlayersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Turakas.ServiceReference1.ServicePlayer> Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServicePlayer", Namespace="http://schemas.datacontract.org/2004/07/TurakasServiceLibrary")]
    public partial class ServicePlayer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceCard", Namespace="http://schemas.datacontract.org/2004/07/TurakasServiceLibrary")]
    public partial class ServiceCard : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int KindField;
        
        private int RankField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Kind {
            get {
                return this.KindField;
            }
            set {
                if ((this.KindField.Equals(value) != true)) {
                    this.KindField = value;
                    this.RaisePropertyChanged("Kind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rank {
            get {
                return this.RankField;
            }
            set {
                if ((this.RankField.Equals(value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITeenus", CallbackContract=typeof(Turakas.ServiceReference1.ITeenusCallback))]
    public interface ITeenus {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/getSubscribers", ReplyAction="http://tempuri.org/ITeenus/getSubscribersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Turakas.ServiceReference1.ServicePlayer>> getSubscribersAsync(Turakas.ServiceReference1.ServiceGame game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/getNewGameAndPlayerId", ReplyAction="http://tempuri.org/ITeenus/getNewGameAndPlayerIdResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> getNewGameAndPlayerIdAsync(Turakas.ServiceReference1.ServicePlayer p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/addPlayerToGame", ReplyAction="http://tempuri.org/ITeenus/addPlayerToGameResponse")]
        System.Threading.Tasks.Task addPlayerToGameAsync(Turakas.ServiceReference1.ServiceGame game, string newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/hit", ReplyAction="http://tempuri.org/ITeenus/hitResponse")]
        System.Threading.Tasks.Task<Turakas.ServiceReference1.ServiceCard> hitAsync(Turakas.ServiceReference1.ServiceCard target, Turakas.ServiceReference1.ServiceCard hit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/move", ReplyAction="http://tempuri.org/ITeenus/moveResponse")]
        System.Threading.Tasks.Task<Turakas.ServiceReference1.ServiceCard> moveAsync(int card_rank, int card_kind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/subscribeTogame", ReplyAction="http://tempuri.org/ITeenus/subscribeTogameResponse")]
        System.Threading.Tasks.Task<Turakas.ServiceReference1.ServiceCard> subscribeTogameAsync(int game, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/sendChatMessage", ReplyAction="http://tempuri.org/ITeenus/sendChatMessageResponse")]
        System.Threading.Tasks.Task sendChatMessageAsync(string message, int gameId, int fromID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/Subscribe", ReplyAction="http://tempuri.org/ITeenus/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/Unsubscribe", ReplyAction="http://tempuri.org/ITeenus/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeenus/gameEnded", ReplyAction="http://tempuri.org/ITeenus/gameEndedResponse")]
        System.Threading.Tasks.Task gameEndedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITeenusCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITeenus/onChatMessage")]
        void onChatMessage(string from, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITeenus/onGetContacts")]
        void onGetContacts(System.Collections.ObjectModel.ObservableCollection<string> contacts);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITeenus/onHit")]
        void onHit(Turakas.ServiceReference1.ServiceCard hit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITeenus/onMove")]
        void onMove(Turakas.ServiceReference1.ServiceCard card);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITeenusChannel : Turakas.ServiceReference1.ITeenus, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TeenusClientBase : System.ServiceModel.DuplexClientBase<Turakas.ServiceReference1.ITeenus>, Turakas.ServiceReference1.ITeenus {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TeenusClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, TeenusClientBase.GetDefaultBinding(), TeenusClientBase.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ITeenus.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeenusClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, TeenusClientBase.GetBindingForEndpoint(endpointConfiguration), TeenusClientBase.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeenusClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, TeenusClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeenusClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, TeenusClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeenusClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Turakas.ServiceReference1.ServicePlayer>> getSubscribersAsync(Turakas.ServiceReference1.ServiceGame game) {
            return base.Channel.getSubscribersAsync(game);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> getNewGameAndPlayerIdAsync(Turakas.ServiceReference1.ServicePlayer p) {
            return base.Channel.getNewGameAndPlayerIdAsync(p);
        }
        
        public System.Threading.Tasks.Task addPlayerToGameAsync(Turakas.ServiceReference1.ServiceGame game, string newPlayer) {
            return base.Channel.addPlayerToGameAsync(game, newPlayer);
        }
        
        public System.Threading.Tasks.Task<Turakas.ServiceReference1.ServiceCard> hitAsync(Turakas.ServiceReference1.ServiceCard target, Turakas.ServiceReference1.ServiceCard hit) {
            return base.Channel.hitAsync(target, hit);
        }
        
        public System.Threading.Tasks.Task<Turakas.ServiceReference1.ServiceCard> moveAsync(int card_rank, int card_kind) {
            return base.Channel.moveAsync(card_rank, card_kind);
        }
        
        public System.Threading.Tasks.Task<Turakas.ServiceReference1.ServiceCard> subscribeTogameAsync(int game, string name) {
            return base.Channel.subscribeTogameAsync(game, name);
        }
        
        public System.Threading.Tasks.Task sendChatMessageAsync(string message, int gameId, int fromID) {
            return base.Channel.sendChatMessageAsync(message, gameId, fromID);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string user) {
            return base.Channel.SubscribeAsync(user);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public System.Threading.Tasks.Task gameEndedAsync() {
            return base.Channel.gameEndedAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ITeenus)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ITeenus)) {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://localhost:11/Service1.svc"), new System.ServiceModel.DnsEndpointIdentity("localhost"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TeenusClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ITeenus);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TeenusClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ITeenus);
        }
        
        public enum EndpointConfiguration {
            
            NetTcpBinding_ITeenus,
        }
    }
    
    public class onChatMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public onChatMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string from {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class onGetContactsReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public onGetContactsReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> contacts {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    public class onHitReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public onHitReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Turakas.ServiceReference1.ServiceCard hit {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Turakas.ServiceReference1.ServiceCard)(this.results[0]));
            }
        }
    }
    
    public class onMoveReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public onMoveReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Turakas.ServiceReference1.ServiceCard card {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Turakas.ServiceReference1.ServiceCard)(this.results[0]));
            }
        }
    }
    
    public partial class TeenusClient : TeenusClientBase {
        
        public TeenusClient(EndpointConfiguration endpointConfiguration) : 
                this(new TeenusClientCallback(), endpointConfiguration) {
        }
        
        private TeenusClient(TeenusClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration) {
            callbackImpl.Initialize(this);
        }
        
        public TeenusClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new TeenusClientCallback(), binding, remoteAddress) {
        }
        
        private TeenusClient(TeenusClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            callbackImpl.Initialize(this);
        }
        
        public TeenusClient() : 
                this(new TeenusClientCallback()) {
        }
        
        private TeenusClient(TeenusClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl)) {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<onChatMessageReceivedEventArgs> onChatMessageReceived;
        
        public event System.EventHandler<onGetContactsReceivedEventArgs> onGetContactsReceived;
        
        public event System.EventHandler<onHitReceivedEventArgs> onHitReceived;
        
        public event System.EventHandler<onMoveReceivedEventArgs> onMoveReceived;
        
        private void OnonChatMessageReceived(object state) {
            if ((this.onChatMessageReceived != null)) {
                object[] results = ((object[])(state));
                this.onChatMessageReceived(this, new onChatMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnonGetContactsReceived(object state) {
            if ((this.onGetContactsReceived != null)) {
                object[] results = ((object[])(state));
                this.onGetContactsReceived(this, new onGetContactsReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnonHitReceived(object state) {
            if ((this.onHitReceived != null)) {
                object[] results = ((object[])(state));
                this.onHitReceived(this, new onHitReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnonMoveReceived(object state) {
            if ((this.onMoveReceived != null)) {
                object[] results = ((object[])(state));
                this.onMoveReceived(this, new onMoveReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class TeenusClientCallback : object, ITeenusCallback {
            
            private TeenusClient proxy;
            
            public void Initialize(TeenusClient proxy) {
                this.proxy = proxy;
            }
            
            public void onChatMessage(string from, string message) {
                this.proxy.OnonChatMessageReceived(new object[] {
                            from,
                            message});
            }
            
            public void onGetContacts(System.Collections.ObjectModel.ObservableCollection<string> contacts) {
                this.proxy.OnonGetContactsReceived(new object[] {
                            contacts});
            }
            
            public void onHit(Turakas.ServiceReference1.ServiceCard hit) {
                this.proxy.OnonHitReceived(new object[] {
                            hit});
            }
            
            public void onMove(Turakas.ServiceReference1.ServiceCard card) {
                this.proxy.OnonMoveReceived(new object[] {
                            card});
            }
        }
    }
}
